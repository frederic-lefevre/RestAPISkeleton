#==================================================
#   L O G G I N G
# Logging file (for errors, info ...)
logging.directory.name=/tmp/
# NO FILE LOGGING ( BLUEMIX )
logging.logfile.name=restApiSkeleton%g.log

# Maximum length in bytes of a log files
logging.logfile.length=80000000

# Maximum number of log files
logging.logfile.number=3

#----------------------------------------------------------------------
# in Memory logging
logging.BufferLogHandler.bufferLength=100

#----------------------------------------------------------------------
# Logging levels (as defined in JDK 1.4.1 java.util.Logging.Level class
# SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST)

# application logging on console and in file (a custom handler will take same level as file)
logging.file.level=INFO
logging.console.level=INFO
logging.BufferLogHandler.level=INFO

#----------------------------------------------------------------------
# Character encoding, for instance UTF-8, ISO-8859-1, UTF-16, US-ASCII ...etc
# (a custom handler will take same encoding as file)
logging.file.encode=UTF-8
logging.console.encode=UTF-8

# root logger : other jar/application logging on console and in file
# (optional properties)
# If a "level" is uncommented, the corresponding logging will take place 
#logging.root.console.level=INFO
#logging.root.file.level=INFO
#logging.rootLogfile.name=techFinder_rootApp%g.log

#-----------------------------------------------------------------------
# Optional properties : 
#   replace SimpleFormatter by JSON formatter or PlainLogFormatter

#logging.formatter=com.ibm.lge.fl.util.JsonLogFormatter
logging.formatter=org.fl.util.PlainLogFormatter

# Specific format of log record for SimpleFormatter
logging.simpleLogFormatter.format=%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %3$S %2$s%n%4$s: %5$s%6$s%n
#==================================================

runningContext.operatingInfo.log=true

# logging level that trigger 
# - putting duration json property in the API return
# - putting additionnal information in the API return 
skeletonRestApi.additionnalReturnAndLogging.level=INFO

# Character encoding for REST API Response
# This will materialize inside the "content-type" http header
skeletonRestApi.charSetReturned=UTF-8

# properties for custom handler
logging.CloudantLogHandler.encode=UTF-8
logging.CloudantLogHandler.level=INFO

# Access to bluemix services when running outside bluemix platform
#	(when running inside bluemix, these information are in the VCAP_SERVICES environnement variable
#    System.getenv("VCAP_SERVICES"); returns a JSON with these information)
#
skyLineApi.bluemix.serviceEnvVar=VCAP_SERVICES
skyLineApi.bluemix.cloudantServiceName=cloudantNoSQLDB

# Cloudant created in Bluemix CIO (internal bluemix)
#skyLineApi.cloudant.account=0be8047b-6ac3-4f31-aadf-a9c12776d75d-bluemix
#skyLineApi.cloudant.user=0be8047b-6ac3-4f31-aadf-a9c12776d75d-bluemix
#skyLineApi.cloudant.password=1c452ce9f18e478fa2c117774517a51a424aaaa7ebee7dd30765be937f7509b4

# Cloudant databases
skyLineApi.logging.cloudant.dbName=skyLineApi_logs


# Cloudant logging handler enable/disable
# the static parameter will be taken into account at the application start up
# which means that there will be no cloudant handler at all
# the dynamic parameter will be taken into account inside the cloudant handler
# which opens the possibility for dynamic enablement
skyLineApi.logging.cloudant.enable.static=true
skyLineApi.logging.cloudant.enable.dynamic=true

# Use ManagedExecutorService (if false use ExecutorService)
skyLineApi.useManagedExecutorService=true

# Number of threads in the thread pool available for ExecutorService multi threading
skyLineApi.nbThreads=80
